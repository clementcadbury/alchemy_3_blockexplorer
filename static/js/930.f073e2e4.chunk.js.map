{"version":3,"file":"static/js/930.f073e2e4.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/bech32/index.js"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.1\";\n","export const version = \"providers/5.7.2\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"web/5.7.1\";\n","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = {\n      ...this.connection,\n      headers: {\n        ...this.connection.headers,\n        'Alchemy-Ethers-Sdk-Method': 'batchSend'\n      }\n    };\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"],"names":["logger","Logger","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","value","defaultProvider","version","Formatter","_classCallCheck","this","formats","getDefaultFormats","_createClass","key","_this","address","bind","bigNumber","blockTag","data","hash","hex","number","type","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","r","uint256","s","v","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","Error","strict","substring","isHexString","result","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","check","_block","gas","isZero","input","networkId","parseInt","replace","parseTransaction","byzantium","_this2","Array","isArray","map","object","checkKey","checkValue","nullValue","replaceValue","array","forEach","checkTopic","topic","serializeTopics","slice","pop","unique","sorted","Object","keys","sort","join","getEventTag","eventName","ForkEvent","warn","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","defineReadOnly","_lastBlockNumber","_inflight","get","split","comps","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","concat","sha256","matcherIpfs","RegExp","matchers","_parseString","start","toUtf8String","_parseBytes","offset","getIpfsLink","link","match","numPad","arrayify","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","hexConcat","Resolver","resolvedAddress","formatter","_supportsEip2544","call","then","eq","catch","code","selector","parameters","tx","ccipReadEnabled","namehash","parseBytes","_context","next","supportsWildcard","sent","dnsEncode","prev","throwError","abrupt","t0","stop","_callee","_fetch","_context2","_callee2","coinType","hexBytes","coinInfo","String","operation","bytes","words","bech32","unshift","_context3","callAddress","_fetchBytes","_getAddress","_callee3","linkage","content","_context4","getText","avatar","scheme","t1","_resolvedAddress","owner","addr","tokenId","t2","t3","tokenOwner","t4","t5","balance","toString","t6","t7","metadataUrl","fetchJson","metadata","JSON","stringify","imageUrl","image","t8","_callee4","_context5","ipfs","ipns","swarm","skynet","urlSafe","base64Encode","a","_callee5","keyBytes","toUtf8Bytes","_context6","hexlify","_callee6","defaultFormatter","nextPollId","BaseProvider","_Provider","_inherits","_super","_createSuper","_events","_emitted","disableCcipRead","constructor","getFormatter","_assertThisInitialized","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","_context7","_callee7","_this3","poll","event","calldata","urls","_context8","sender","errorMessages","href","json","errorPassThrough","response","statusCode","errorMessage","message","m","_callee8","maxAge","_context9","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_ref","_this4","_setFastBlockNumber","_callee9","pollId","runners","_context10","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","_this5","runner","getTransactionReceipt","minFromBlock","getLogs","log","all","_callee10","polling","_context11","_callee11","_context12","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_callee12","_this6","_poller","_this7","setInterval","_bootstrapPoll","clearInterval","_this8","_this9","now","getBlockNumber","timeout","_waitForTransaction","_context13","_callee13","replaceable","_context16","reject","cancelFuncs","done","alreadyDone","minedHandler","_this10","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","_regeneratorRuntime","mark","_callee15","_this11","wrap","_context15","getTransactionCount","_callee14","mined","ti","_receipt","reason","_context14","getTransaction","getBlockWithTransactions","waitForTransaction","cancelled","replacement","_wrapTransaction","timer","unref","clearTimeout","_callee16","_context17","_callee17","_context18","method","_callee18","addressOrName","_context19","_getBlockTag","params","_callee19","_context20","_callee20","_context21","_callee21","position","_context22","p","_callee22","_this12","expectedHash","returnedHash","wait","confirms","_callee23","_context23","signedTransaction","_context24","t","hexTx","_callee24","values","_context25","_this13","_callee25","_context26","_this14","_callee26","attempt","redirects","txSender","_context27","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipReadFetch","ccipResult","_call","_callee27","_context28","_getTransactionRequest","resolved","_callee28","_context29","_callee29","_context30","resolveName","_callee30","blockHashOrBlockTag","includeTransactions","_context32","_this15","_callee31","_blockNumber","blockWithTxs","_this16","_context31","oncePoll","_callee32","_getBlock","_context34","_this17","_callee33","_context33","_callee34","_context36","_this18","_callee35","_context35","_callee36","_context37","_getFilter","_callee37","_context38","_callee38","_context39","_callee39","currentName","_context40","_getResolver","resolver","_callee40","_context41","addrData","_callee41","_context42","getResolver","_callee42","_context43","node","resolverAddr","_callee43","nameOrAddress","_context44","resolverAddress","getAvatar","_callee44","e","pollable","_startEvent","_addEventListener","_this19","_len","arguments","args","_key","stopped","eventTag","apply","_stopEvent","_this20","removeAllListeners","found","_this21","Provider","errorGas","spelunk","requireData","parse","checkError","body","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","_Signer","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","hexlifyTransaction","action","sendUncheckedTransaction","messageData","domain","types","_TypedDataEncoder","populated","password","Signer","_JsonRpcSigner","_super2","allowedTransactionKeys","_BaseProvider","_super3","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","request","id","jsonrpc","deepCopy","cache","connection","getFeeData","feeData","prepareRequest","_startPending","_get","_getPrototypeOf","prototype","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","getUrl","headers","skipFetchSetup","mode","credentials","redirect","referrer","fetchOptions","opts","fetch","arrayBuffer","statusMessage","statusText","staller","bodyify","isBytesLike","trim","processFunc","updated","k","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","allow304","allowGzip","user","allowInsecureAuthentication","argument","authorization","reData","dataMatch","base64Decode","fromCharCode","requestBody","requestMethod","flatHeaders","header","runningTimeout","promise","cancel","runningFetch","location","tryAgain","retryAfter","random","pow","throttleRetry","race","_fetchData","floor","ceiling","interval","retryLimit","onceBlock","RequestBatcher","sendBatchFn","maxBatchSize","pendingBatch","inflightRequest","sendBatchRequest","pendingBatchTimer","batch","inflight","index","_JsonRpcProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","assign","batcher","requests","logWarn","DEFAULT_ALCHEMY_API_KEY","_send","methodName","forceBatch","enqueueRequest","CustomNetworks","DEFAULT_NETWORK","Network","includes","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","ALPHABET","ALPHABET_MAP","z","x","charAt","TypeError","polymodStep","pre","b","prefixChk","chk","c","charCodeAt","__decode","str","LIMIT","lowered","uppered","toUpperCase","lastIndexOf","wordChars","convert","inBits","outBits","pad","bits","maxV","module","exports","decodeUnsafe","res","decode","encode","toWordsUnsafe","toWords","fromWordsUnsafe","fromWords"],"sourceRoot":""}